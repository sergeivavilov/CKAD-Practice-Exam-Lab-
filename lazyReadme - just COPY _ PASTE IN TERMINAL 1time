1.

cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alpha-1
  namespace: critical-systems
spec:
  replicas: 1  # Assuming you want one replica
  selector:
    matchLabels:
      app: alpha-1  # This must match the labels in the template.metadata.labels section
  template:
    metadata:
      labels:
        app: alpha-1  # This must match the selector.matchLabels
    spec:
      containers:
      - name: alpha-container
        image: notmiddev30/alpha-app:0.1
        ports:
        - containerPort: 5000
        readinessProbe:
          httpGet:
            path: /healthz
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 3
EOF


2.



cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alfred
  namespace: kube-ship-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alfred
  template:
    metadata:
      labels:
        app: alfred
    spec:
      serviceAccountName: alfred-sa
      containers:
      - name: alfred
        image: yourimage/repo:tag
        ports:
        - containerPort: 8080
EOF



3.




kubectl create serviceaccount hyper-v-sa -n non-critical-systems


cat <<EOF | kubectl apply -f -
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: non-critical-systems
  name: pod-listing
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list", "get", "watch"]
EOF



cat <<EOF | kubectl apply -f -
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pod-listing-binding
  namespace: non-critical-systems
subjects:
- kind: ServiceAccount
  name: hyper-v-sa
  namespace: non-critical-systems
roleRef:
  kind: Role
  name: pod-listing
  apiGroup: rbac.authorization.k8s.io
EOF





cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: hyper-v
  name: hyper-v
  namespace: non-critical-systems
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hyper-v
  template:
    metadata:
      labels:
        app: hyper-v
    spec:
      serviceAccountName: hyper-v-sa
      containers:
      - name: hyper-v
        image: notmiddev30/test-k8s:0.4
EOF




4.





cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: novanet-resources
  namespace: warp
spec:
  containers:
  - name: nginx-container
    image: nginx:stable
    resources:
      requests:
        cpu: "400m"
        memory: "1Gi"
EOF



5.




cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Service
metadata:
  name: lunar-service
  namespace: gravity-grid
spec:
  type: NodePort
  selector:
    app: lunar
  ports:
    - port: 8080
      targetPort: 8080
      nodePort: 30080  # Ensure this port does not conflict with other services.
EOF




kubectl create secret docker-registry myregistrysecret \
--docker-server=YOUR_REGISTRY_SERVER \
--docker-username=YOUR_REGISTRY_USERNAME \
--docker-password=YOUR_REGISTRY_PASSWORD \
--docker-email=YOUR_REGISTRY_EMAIL \
-n gravity-grid



cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lunar
  namespace: gravity-grid
spec:
  replicas: 6
  selector:
    matchLabels:
      app: lunar
  template:
    metadata:
      labels:
        app: lunar
    spec:
      containers:
      - name: nginx
        image: ifccncf/nginx:1.12.2
        ports:
        - containerPort: 8080
        env:
        - name: NGINX_PORT
          value: "8080"
      imagePullSecrets:
      - name: myregistrysecret
EOF






6. 



cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: orion-ops
  name: orion-ops
  namespace: celestial-core
spec:
  replicas: 2
  selector:
    matchLabels:
      app: orion-ops
  template:
    metadata:
      labels:
        app: orion-ops
    spec:
      containers:
      - image: httpd:2.4.41-alpine
        name: orion-container
        env:
        - name: PASSWORD
          value: "4fd$djfhj"
        ports:
        - containerPort: 80
EOF



7. 




kubectl create secret generic space-sentry-secret --from-literal=dest=astro -n kube-ship-system && cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: space-sentry
  namespace: kube-ship-system
spec:
  containers:
  - name: httpd-container
    image: httpd:2.4.41-alpine
    env:
    - name: DESTINATION
      valueFrom:
        secretKeyRef:
          name: space-sentry-secret
          key: dest
EOF




8. 




cat <<EOF | kubectl apply -f - && kubectl rollout status deployment/rocket -n non-critical-systems && kubectl rollout undo deployment/rocket -n non-critical-systems && kubectl rollout status deployment/rocket -n non-critical-systems && kubectl rollout history deployment/rocket -n non-critical-systems
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  labels:
    app: rocket
  name: rocket
  namespace: non-critical-systems
spec:
  replicas: 4
  selector:
    matchLabels:
      app: rocket
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 4
      maxUnavailable: 4
  template:
    metadata:
      labels:
        app: rocket
    spec:
      containers:
      - name: busybox
        image: busybox:1.31
        command:
        - sleep
        - "86400"
      restartPolicy: Always
EOF





9. 


cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cosmic-whale
  namespace: star-stream
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cosmic-whale
  template:
    metadata:
      labels:
        app: cosmic-whale
    spec:
      securityContext:
        runAsUser: 20000  # Pod-level security context
      containers:
      - name: cosmic-whale
        image: notmiddev30/cosmic-whale-new:0.1
        securityContext:
          allowPrivilegeEscalation: false  # Container-level security context
EOF




10. 


sudo chown -R ec2-user:ec2-user /home/ec2-user/.kube
kubectl config set-context --current --namespace=astro-link
kubectl label pods lunar-lander connect-user=true compute-user=true --overwrite


11. 



cat <<EOF | kubectl apply -f -
apiVersion: batch/v1
kind: CronJob
metadata:
  name: pi
spec:
  schedule: "*/5 * * * *"
  successfulJobsHistoryLimit: 4
  failedJobsHistoryLimit: 5
  jobTemplate:
    spec:
      backoffLimit: 0
      activeDeadlineSeconds: 10
      template:
        spec:
          containers:
          - name: pi
            image: notmiddev30/pi:0.1
            command: ["go", "run", "pi.go"]
          restartPolicy: Never
EOF

# Adding a delay of 5 seconds before creating the job
sleep 5
sleep 5

kubectl create job pi-test --from=cronjob/pi




12. 


cat <<EOF | kubectl apply -f -
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: orion-station-ingress
  namespace: galactix
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /orion-station
        pathType: Prefix
        backend:
          service:
            name: orion-station-svc
            port:
              number: 80
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx
  name: orion-station-svc
  namespace: galactix
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: nginx
  type: ClusterIP
EOF





13. 



cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: galactix-db
  namespace: milky-way
  labels:
    app.galactix.io/name: galactix-db
    app.galactix.io/component: compute
spec:
  replicas: 1
  selector:
    matchLabels:
      app.galactix.io/name: galactix-db
      app.galactix.io/component: compute
  template:
    metadata:
      labels:
        app.galactix.io/name: galactix-db
        app.galactix.io/component: compute
    spec:
      containers:
      - name: mongo
        image: mongo:4.2
        args:
          - --bind_ip
          - 0.0.0.0
        resources:
          requests:
            memory: "160Mi"  # Set the memory request to 160Mi
          limits:
            memory: "320Mi"  # Set the memory limit to half the maximum memory constraint for the milky-way namespace
        ports:
        - containerPort: 27017
EOF


14. 



cat <<EOF | kubectl apply -f - && cat <<EOF2 | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: stellar
  name: canary-stellar-deployment
  namespace: starfish
spec:
  replicas: 5
  selector:
    matchLabels:
      app: stellar
  template:
    metadata:
      labels:
        app: stellar
    spec:
      containers:
      - image: nginx
        name: stellar
        ports:
        - containerPort: 80
EOF
apiVersion: v1
kind: ResourceQuota
metadata:
  name: pod-quota
  namespace: starfish
spec:
  hard:
    pods: "10"
EOF2




kubectl scale deployment current-stellar-deployment --replicas=7 -n starfish
kubectl scale deployment canary-stellar-deployment --replicas=3 -n starfish




15. 


cd ~/kubeship/15/build
sudo docker build -t space-cat:1.1 .
mkdir -p ~/kubeship/15/images
sudo docker save space-cat:1.1 -o ~/kubeship/15/images/space-cat-1.1.tar
ls -lh ~/kubeship/15/images/
cd ../..
cd ..


16. 


kubectl scale deployment starblaze-deployment --replicas=3 -n starblaze && \
kubectl label deployment starblaze-deployment star=thousand --overwrite -n starblaze && \
echo "apiVersion: v1
kind: Service
metadata:
  name: nebula
  namespace: starblaze
spec:
  type: NodePort
  ports:
  - port: 8888
    targetPort: 8888
    protocol: TCP
  selector:
    app: starblaze-deployment" > nebula-service.yaml && \
kubectl apply -f nebula-service.yaml



kubectl get deployments --all-namespaces 
kubectl get services --all-namespaces 
kubectl get jobs --all-namespaces 
kubectl get cronjobs --all-namespaces 
kubectl get pods --all-namespaces 
kubectl get secrets --all-namespaces




CONGRATULATIONS!!!!!!
